# Updates.txt

## Document Vault with Time-Based Messaging MVP

This MVP implements a simple document vault with a time-based messaging system. Key features include:

1. Document storage and retrieval
2. Countdown timer with reset functionality
3. Automatic message sending when the countdown expires
4. Simple web interface for receiving "I'm alive" signals and adding documents

### Implementation Details

- The core functionality is implemented in the `DocumentVault` class.
- Flask is used to create a simple web server for handling API requests.
- Documents are stored in memory (for MVP purposes) using a dictionary.
- The countdown timer is implemented using datetime comparisons.
- Email sending is handled using the `smtplib` library.
- A separate loop checks the countdown status every minute.

### Next Steps

1. Implement persistent storage for documents (e.g., database integration)
2. Add user authentication and authorization
3. Improve error handling and logging
4. Implement more robust scheduling for the countdown check (e.g., using Celery)
5. Add a user interface for document management and system configuration
6. Enhance security measures (e.g., encryption for stored documents)
7. Implement unit and integration tests

### Challenges and Considerations

- Ensuring the reliability of the "I'm alive" signal mechanism
- Handling potential network issues when sending emails
- Scaling the solution for larger numbers of documents and users
- Ensuring data privacy and security compliance (GDPR, etc.)


## Document Vault with Time-Based Messaging MVP - Update 1

### New Features and Changes
1. Implemented email link functionality for resetting the countdown timer
2. Created a setup script for initializing the project structure
3. Added instructions for setting up the GitHub project

### Implementation Details
- Modified the `DocumentVault` class to include a reset token
- Added a new Flask route `/reset/<token>` to handle timer resets via email link
- Updated the `send_message` method to include the reset link in the email
- Created a shell script `setup_project.sh` to set up the project structure

### Next Steps
1. Implement persistent storage for documents (e.g., database integration)
2. Add user authentication and authorization
3. Improve error handling and logging
4. Implement more robust scheduling for the countdown check (e.g., using Celery)
5. Add a user interface for document management and system configuration
6. Enhance security measures (e.g., encryption for stored documents)
7. Implement unit and integration tests
8. Set up continuous integration and deployment (CI/CD) pipeline

### Challenges and Considerations
- Ensuring the security of the reset link in emails
- Handling potential abuse of the reset link
- Implementing proper error handling for email sending failures


## Document Vault with Time-Based Messaging MVP - Update 2

### New Features and Changes
1. Added a root route ('/') to display a simple homepage
2. Included links to test the reset functionality and add documents

### Implementation Details
- Created a new Flask route for the root URL ('/')
- Used `render_template_string` to display a simple HTML homepage
- Added links to test the reset functionality and add documents (note: adding documents requires a POST request)

### Next Steps
1. Implement persistent storage for documents (e.g., database integration)
2. Add user authentication and authorization
3. Improve error handling and logging
4. Implement more robust scheduling for the countdown check (e.g., using Celery)
5. Enhance the user interface for document management and system configuration
6. Implement security measures (e.g., encryption for stored documents)
7. Add unit and integration tests
8. Set up continuous integration and deployment (CI/CD) pipeline

### Challenges and Considerations
- Ensuring the security of the reset link in emails
- Handling potential abuse of the reset link
- Implementing proper error handling for email sending failures
- Developing a more user-friendly interface for document management

## Document Vault Project - Major Update

### Changes and Additions

1. Implemented Google OAuth for user authentication
2. Added document management functionality (CRUD operations)
3. Implemented recipient management
4. Set up Celery for background tasks (document expiry checks)
5. Added email functionality for password reset
6. Improved project structure and organization
7. Added configuration management
8. Implemented basic UI using Bootstrap
9. Added unit tests
10. Created setup scripts and documentation

### Next Steps

1. Implement more comprehensive error handling
2. Add more unit and integration tests
3. Improve UI/UX design
4. Implement advanced search functionality for documents
5. Add document versioning
6. Implement document sharing functionality
7. Add user roles and permissions
8. Implement audit logging
9. Optimize database queries for better performance
10. Set up continuous integration and deployment (CI/CD) pipeline

### Known Issues

1. Celery worker may not start correctly due to import issues (being addressed)
2. Some unit tests are failing and need to be updated
3. UI needs further refinement for better user experience
4. Error handling needs improvement in some areas


## Document Vault Project - Major Update (September 10, 2024)

### Changes and Additions

1. Implemented Google OAuth for user authentication
   - Added OAuth client initialization in app/__init__.py
   - Created login and callback routes in app/routes/auth.py
   - Enabled insecure transport for development purposes (to be removed in production)

2. Updated main routes to handle authenticated and unauthenticated users
   - Modified app/routes/main.py to show different views based on authentication status

3. Created new HTML templates
   - Added landing.html for unauthenticated users
   - Added dashboard.html for authenticated users

4. Updated base.html template to include proper navigation and logout option

5. Fixed InsecureTransportError in OAuth process for development

6. Improved error handling in OAuth callback function

### Next Steps

1. Implement document management functionality (CRUD operations)
2. Set up email functionality for notifications
3. Implement more comprehensive error handling and logging
4. Add more unit and integration tests
5. Prepare the application for production deployment (ensure HTTPS is used)
6. Implement user roles and permissions
7. Add document versioning and sharing functionality

### Known Issues

1. The application is currently using insecure transport (HTTP) for OAuth. This must be changed to HTTPS for production use.
2. More comprehensive testing is needed, especially for the authentication flow and document management.


## Document Vault Project - Major Update (September 10, 2024)

### Changes and Additions

1. Implemented Google OAuth for user authentication
   - Added OAuth client initialization in app/__init__.py
   - Created login and callback routes in app/routes/auth.py
   - Enabled insecure transport for development purposes (to be removed in production)

2. Updated main routes to handle authenticated and unauthenticated users
   - Modified app/routes/main.py to show different views based on authentication status

3. Created new HTML templates
   - Added landing.html for unauthenticated users
   - Added dashboard.html for authenticated users

4. Updated base.html template to include proper navigation and logout option

5. Fixed InsecureTransportError in OAuth process for development

6. Improved error handling in OAuth callback function

7. Implemented document management functionality (CRUD operations)
   - Added routes for listing, adding, editing, and deleting documents
   - Created corresponding HTML templates for document management

8. Implemented recipient management functionality
   - Added routes for listing, adding, editing, and deleting recipients
   - Created corresponding HTML templates for recipient management

9. Set up APScheduler for background tasks
   - Implemented check_document_expiry task

10. Updated testing configuration
    - Created TestConfig class
    - Implemented mock OAuth client for testing
    - Updated conftest.py to use in-memory SQLite database for tests

11. Fixed various bugs and import issues

### Next Steps

1. Implement more comprehensive error handling and logging
2. Improve UI/UX design
3. Implement advanced search functionality for documents
4. Add document versioning
5. Implement document sharing functionality
6. Add user roles and permissions
7. Implement audit logging
8. Optimize database queries for better performance
9. Set up continuous integration and deployment (CI/CD) pipeline
10. Implement email notifications for document expiry

### Known Issues

1. The application is currently using insecure transport (HTTP) for OAuth. This must be changed to HTTPS for production use.
2. More comprehensive testing is needed, especially for edge cases and error scenarios.
3. The current UI is basic and needs improvement for better user experience.


Document Vault Project Updates

1. Resolved circular import issue:
   - Refactored app/__init__.py to separate the scheduler initialization.
   - Created a new function `init_scheduler` to handle scheduler setup.
   - Removed circular import in app/tasks.py.

2. Updated test configuration:
   - Modified tests/conftest.py to properly handle the scheduler initialization.
   - Changed the app fixture scope to 'session' for better performance.

3. Updated run.py:
   - Added scheduler initialization to the run script.

These changes should resolve the unit test issues and allow the project to move forward to the prototype stage. The main problem was a circular import between app/__init__.py and app/tasks.py, which has been resolved by restructuring the initialization process.

Next steps:
1. Run the tests again to ensure they pass.
2. If any issues persist, review and update the individual test files as needed.
3. Once tests are passing, proceed with further development and refinement of the Document Vault features.

Document Vault Project Updates

1. Resolved circular import issue (previous update)

2. Fixed test suite issues:
   - Updated MockOAuthClient to return a more realistic Google OAuth URL.
   - Modified AuthActions to prevent duplicate user creation in tests.
   - Added a db_session fixture to properly handle database sessions and rollbacks in tests.
   - Ensured that TestConfig is used in the app fixture for tests.

3. Next steps:
   - Run the tests again to verify that all issues have been resolved.
   - If any tests are still failing, investigate and fix each failing test individually.
   - Once all tests are passing, proceed with further development and refinement of the Document Vault features.

Document Vault Project Updates

1. Fixed document list display:
   - Updated documents.py route to eager load recipient information.
   - Modified documents.html template to correctly display recipient names.

2. Improved UI for file uploads:
   - Added information about acceptable file types to add_document.html and edit_document.html.
   - Improved form layout and added helpful text for users.

3. Fixed pytest errors:
   - Updated db_session fixture in tests/conftest.py to use scoped_session and sessionmaker.

4. Next steps:
   - Run the tests again to verify that all issues have been resolved.
   - If any tests are still failing, investigate and fix each failing test individually.
   - Once all tests are passing, proceed with further development and refinement of the Document Vault features.
   - Consider adding more user-friendly elements to the UI, such as tooltips or help text for various functions.
   - Implement client-side validation for file uploads to provide immediate feedback on acceptable file types.

Document Vault Project Updates

1. Fixed Document model:
   - Added 'recipient' relationship to the Document model in app/models.py.

2. Updated test configuration:
   - Modified tests/conftest.py to correctly handle the app fixture and AuthActions.
   - Ensured that app_context is properly used in tests.

3. Next steps:
   - Run database migrations to apply the Document model changes.
   - Run the tests again to verify that all issues have been resolved.
   - If any tests are still failing, investigate and fix each failing test individually.
   - Once all tests are passing, proceed with further development and refinement of the Document Vault features.

Document Vault Project Updates

1. Fixed unit test issues:
   - Updated MockOAuthClient in tests/conftest.py
   - Modified create_user test to use a unique email

2. Added test email functionality:
   - Created a new route in config.py to send test emails using current configuration

3. Improved UX/UI:
   - Updated base.html template with a cleaner, more intuitive layout
   - Added custom CSS for better presentation and accessibility
   - Implemented dark mode support for high contrast

4. Next steps:
   - Run the tests again to verify that all issues have been resolved
   - Test the new email functionality
   - Review the updated UI and gather feedback from users
   - Continue refining and expanding the application's features

Document Vault Project Updates

1. Fixed LegacyAPIWarning:
   - Updated all instances of Model.query.get() to db.session.get(Model, id)
   - Modified auth.py, test_documents.py, and test_recipients.py

2. Fixed failing test_create_user:
   - Added missing import for 'db' in test_auth.py
   - Updated the test to use db.session.get() instead of querying

3. Next steps:
   - Run the tests again to verify that all warnings and errors have been resolved
   - Continue with any remaining feature development or refinements
   - Consider updating the application to fully support SQLAlchemy 2.0 syntax


1. Addressed LegacyAPIWarning:
   - Updated models.py to use SQLAlchemy 2.0 style relationships
   - Modified __init__.py to ensure proper initialization of SQLAlchemy
   - Updated auth.py to use db.session.get() instead of User.query.get()

2. Ensured all parts of the application are using SQLAlchemy 2.0 compatible syntax

3. Next steps:
   - Run the tests again to verify that all warnings have been resolved
   - Review the entire codebase for any remaining uses of deprecated SQLAlchemy methods
   - Continue with any remaining feature development or refinements
   - Consider updating Flask-SQLAlchemy to the latest version if not already done

Document Vault Project Updates

1. Fixed issue with files not being available after logout and login:
   - Updated User model to include relationship with documents
   - Modified login process to use remember=True for persistent sessions

2. Added recent activity stream to the dashboard:
   - Updated main route to fetch recent documents
   - Modified dashboard template to display recent activity

3. Improved configuration screen to allow sending test emails without saving:
   - Updated config route to handle test email requests
   - Modified config template to include a separate button for test emails

4. Added CLI commands for testing scheduler and document countdown:
   - Created new cli.py file with custom commands
   - Updated __init__.py to include new CLI commands

5. Next steps:
   - Test the new features thoroughly
   - Update user documentation to reflect new functionality
   - Consider adding more robust error handling and logging
   - Plan for future enhancements based on user feedback

# Document Vault Project Updates 11 september 2024

## Enhanced Document Listing and User Interface

1. Updated the document listing route (`/documents`) to include pagination and eager loading of related data:
   - Added pagination to improve performance for users with many documents.
   - Implemented eager loading of recipient data to reduce database queries.
   - Sorted documents by last update date for better organization.

2. Improved the document listing template (`documents.html`):
   - Added a responsive table layout for better display on various devices.
   - Included more informative columns: title, recipient, and last updated date.
   - Implemented pagination controls for easier navigation through document lists.
   - Added icons to buttons for improved visual cues.
   - Included tooltips on action buttons for better accessibility.

3. Enhanced user experience:
   - Added a helpful message when no documents are present.
   - Improved the styling and layout for better readability and ND user interaction.

These changes aim to provide a more intuitive and efficient user interface, especially for users with many documents. The pagination feature will help with performance as the number of documents grows, and the additional information in the list view will help users quickly find the documents they need.

Next steps:
- Implement more robust error handling, especially for database operations.
- Add logging throughout the application for better debugging and monitoring.
- Enhance security measures around document storage and access.
- Expand the test suite to cover these new features and edge cases.


Author: Adam Vials Moore
Last Updated: September 11, 2024
License: Apache 2.0